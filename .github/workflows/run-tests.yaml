# This workflow runs the python tests against an edelweiss data server and postgres
# run in a dockercompose setup

name: Run tests against server

on: [push]

env:
  POETRY_VIRTUALENVS_CREATE: false

jobs:

  test:
    name: Build server and run tests
    runs-on: ubuntu-latest
    steps:

    - name: Checkout the repository
      uses: actions/checkout@master

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    - name: Configure docker to use the gcloud command-line tool as a credential helper
      run: |
        gcloud auth configure-docker

    - name: run database for tests
      working-directory: tests
      run: docker-compose -f docker-compose.yaml up -d postgres

    - name: wait for database
      working-directory: tests
      run: sleep 3

    - name: run server for tests
      working-directory: tests
      run: docker-compose -f docker-compose.yaml up -d edelweiss

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.6'
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Install dependencies
      run: python -m pip install --upgrade pip setuptools wheel poetry

    - name: install edelweiss_data library from source
      run: poetry install

    - name: Check running containers
      run: docker ps -a

    - name: Check db logs
      run: docker logs tests_postgres_1

    - name: Check server logs
      run: docker logs tests_edelweiss_1

    - name: Ping server for health
      run: curl http://localhost:8000/health

    - name: Ping server for readyness
      run: curl http://localhost:8000/ready

    - name: run tests
      run: poetry run pytest tests/
