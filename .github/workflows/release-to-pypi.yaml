# This workflow runs the python tests against an edelweiss data server and postgres
# run in a dockercompose setup

name: Publish to Pypi

on:
  release:
    types: [published, prereleased]

jobs:

  test:
    name: Publish the library
    runs-on: ubuntu-latest
    steps:

    - name: Checkout the repository
      uses: actions/checkout@master

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.6'
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Install dependencies
      run: python -m pip install --upgrade pip setuptools wheel poetry

    - name: Set env
      run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})

    - name: Set version umber in pyproject.toml
      run: sed -i "s@^version.\+@version = $RELEASE_VERSION@" pyproject.toml

    - name: Publish
      run: poetry publish --build -u edelweissconnect -p ${{ secrets.PYPI_PASSWORD }}
